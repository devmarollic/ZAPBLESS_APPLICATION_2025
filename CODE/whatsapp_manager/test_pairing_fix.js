// -- IMPORTS

const axios = require('axios');

// -- CONSTANTS

const BASE_URL = 'http://localhost:3000';
const TEST_PHONE = '5511999999999';

// -- TYPES

// -- VARIABLES

// -- FUNCTIONS

/**
 * Testa a corre√ß√£o do pairing code
 */
async function testPairingCodeFix() {
    console.log('üß™ Testando corre√ß√£o do pairing code...\n');

    try {
        // 1. Verificar status inicial
        console.log('1Ô∏è‚É£ Verificando status inicial...');
        const statusResponse = await axios.get(`${BASE_URL}/status`);
        console.log('   Status:', statusResponse.data.status);
        console.log('   Conectado:', statusResponse.data.status === 'open');
        console.log('');

        // 2. Iniciar sess√£o sem pairing code
        console.log('2Ô∏è‚É£ Iniciando sess√£o sem pairing code...');
        const startResponse = await axios.post(`${BASE_URL}/start`);
        console.log('   Sucesso:', startResponse.data.success);
        console.log('   Status:', startResponse.data.status);
        console.log('');

        // 3. Aguardar conex√£o estar pronta
        console.log('3Ô∏è‚É£ Aguardando conex√£o estar pronta...');
        let isConnected = false;
        let attempts = 0;
        const maxAttempts = 30; // 30 segundos

        while (!isConnected && attempts < maxAttempts) {
            await new Promise(resolve => setTimeout(resolve, 1000));
            attempts++;

            try {
                const statusCheck = await axios.get(`${BASE_URL}/status`);
                console.log(`   Tentativa ${attempts}: ${statusCheck.data.status}`);
                
                if (statusCheck.data.status === 'open') {
                    isConnected = true;
                    console.log('   ‚úÖ Conex√£o estabelecida!');
                }
            } catch (error) {
                console.log(`   Tentativa ${attempts}: Erro ao verificar status`);
            }
        }

        if (!isConnected) {
            console.log('   ‚ùå Timeout aguardando conex√£o');
            return false;
        }

        console.log('');

        // 4. Solicitar pairing code
        console.log('4Ô∏è‚É£ Solicitando pairing code...');
        const pairingResponse = await axios.post(`${BASE_URL}/pairing-code`, {
            phoneNumber: TEST_PHONE
        });

        console.log('   Sucesso:', pairingResponse.data.success);
        console.log('   Pairing Code:', pairingResponse.data.pairingCode);
        console.log('   Mensagem:', pairingResponse.data.message);
        console.log('');

        // 5. Verificar se o pairing code foi gerado
        if (pairingResponse.data.pairingCode) {
            console.log('5Ô∏è‚É£ Verificando pairing code no status...');
            const finalStatus = await axios.get(`${BASE_URL}/status`);
            console.log('   Pairing Code no status:', finalStatus.data.pairingCode);
            console.log('');

            console.log('‚úÖ Teste conclu√≠do com sucesso!');
            console.log('   O pairing code foi gerado corretamente ap√≥s a conex√£o estar pronta.');
            return true;
        } else {
            console.log('5Ô∏è‚É£ Aguardando pairing code ser gerado...');
            let pairingCodeReceived = false;
            attempts = 0;

            while (!pairingCodeReceived && attempts < 10) {
                await new Promise(resolve => setTimeout(resolve, 2000));
                attempts++;

                try {
                    const statusCheck = await axios.get(`${BASE_URL}/status`);
                    if (statusCheck.data.pairingCode) {
                        console.log('   ‚úÖ Pairing code recebido:', statusCheck.data.pairingCode);
                        pairingCodeReceived = true;
                    } else {
                        console.log(`   Tentativa ${attempts}: Aguardando pairing code...`);
                    }
                } catch (error) {
                    console.log(`   Tentativa ${attempts}: Erro ao verificar status`);
                }
            }

            if (pairingCodeReceived) {
                console.log('‚úÖ Teste conclu√≠do com sucesso!');
                console.log('   O pairing code foi gerado corretamente ap√≥s a conex√£o estar pronta.');
                return true;
            } else {
                console.log('‚ùå Timeout aguardando pairing code');
                return false;
            }
        }

    } catch (error) {
        console.error('‚ùå Erro no teste:', error.response?.data || error.message);
        return false;
    }
}

/**
 * Testa cen√°rio de erro (conex√£o fechada)
 */
async function testErrorScenario() {
    console.log('üß™ Testando cen√°rio de erro (conex√£o fechada)...\n');

    try {
        // 1. Desconectar se estiver conectado
        console.log('1Ô∏è‚É£ Desconectando sess√£o atual...');
        try {
            await axios.post(`${BASE_URL}/disconnect`);
            console.log('   ‚úÖ Sess√£o desconectada');
        } catch (error) {
            console.log('   ‚ÑπÔ∏è  Sess√£o j√° desconectada ou erro ao desconectar');
        }
        console.log('');

        // 2. Tentar solicitar pairing code com conex√£o fechada
        console.log('2Ô∏è‚É£ Tentando solicitar pairing code com conex√£o fechada...');
        const pairingResponse = await axios.post(`${BASE_URL}/pairing-code`, {
            phoneNumber: TEST_PHONE
        });

        console.log('   Sucesso:', pairingResponse.data.success);
        console.log('   Pairing Code:', pairingResponse.data.pairingCode);
        console.log('   Mensagem:', pairingResponse.data.message);
        console.log('');

        if (pairingResponse.data.pairingCode === null) {
            console.log('‚úÖ Teste de erro conclu√≠do com sucesso!');
            console.log('   O sistema n√£o tentou gerar pairing code com conex√£o fechada.');
            return true;
        } else {
            console.log('‚ùå Erro: Pairing code foi gerado com conex√£o fechada');
            return false;
        }

    } catch (error) {
        console.error('‚ùå Erro no teste de cen√°rio de erro:', error.response?.data || error.message);
        return false;
    }
}

/**
 * Testa reconex√£o e pairing code
 */
async function testReconnectionScenario() {
    console.log('üß™ Testando cen√°rio de reconex√£o...\n');

    try {
        // 1. Iniciar sess√£o
        console.log('1Ô∏è‚É£ Iniciando sess√£o...');
        await axios.post(`${BASE_URL}/start`);
        console.log('   ‚úÖ Sess√£o iniciada');
        console.log('');

        // 2. Aguardar conex√£o
        console.log('2Ô∏è‚É£ Aguardando conex√£o...');
        let isConnected = false;
        let attempts = 0;

        while (!isConnected && attempts < 30) {
            await new Promise(resolve => setTimeout(resolve, 1000));
            attempts++;

            try {
                const statusCheck = await axios.get(`${BASE_URL}/status`);
                if (statusCheck.data.status === 'open') {
                    isConnected = true;
                    console.log('   ‚úÖ Conex√£o estabelecida!');
                }
            } catch (error) {
                // Ignora erros durante a verifica√ß√£o
            }
        }

        if (!isConnected) {
            console.log('   ‚ùå Timeout aguardando conex√£o');
            return false;
        }
        console.log('');

        // 3. Solicitar pairing code
        console.log('3Ô∏è‚É£ Solicitando pairing code...');
        const pairingResponse = await axios.post(`${BASE_URL}/pairing-code`, {
            phoneNumber: TEST_PHONE
        });

        console.log('   Sucesso:', pairingResponse.data.success);
        console.log('   Pairing Code:', pairingResponse.data.pairingCode);
        console.log('');

        // 4. Simular reconex√£o (desconectar e reconectar)
        console.log('4Ô∏è‚É£ Simulando reconex√£o...');
        await axios.post(`${BASE_URL}/disconnect`);
        console.log('   ‚úÖ Desconectado');

        await new Promise(resolve => setTimeout(resolve, 2000));

        await axios.post(`${BASE_URL}/start`);
        console.log('   ‚úÖ Reconectado');
        console.log('');

        // 5. Verificar se o pairing code ainda funciona
        console.log('5Ô∏è‚É£ Verificando pairing code ap√≥s reconex√£o...');
        const finalPairingResponse = await axios.post(`${BASE_URL}/pairing-code`, {
            phoneNumber: TEST_PHONE
        });

        console.log('   Sucesso:', finalPairingResponse.data.success);
        console.log('   Pairing Code:', finalPairingResponse.data.pairingCode);
        console.log('');

        console.log('‚úÖ Teste de reconex√£o conclu√≠do com sucesso!');
        return true;

    } catch (error) {
        console.error('‚ùå Erro no teste de reconex√£o:', error.response?.data || error.message);
        return false;
    }
}

// -- STATEMENTS

// Executa os testes se chamado diretamente
if (require.main === module) {
    const args = process.argv.slice(2);
    const testType = args[0] || 'all';

    async function runTests() {
        let allPassed = true;

        if (testType === 'all' || testType === 'fix') {
            console.log('='.repeat(60));
            console.log('TESTE: Corre√ß√£o do Pairing Code');
            console.log('='.repeat(60));
            const fixResult = await testPairingCodeFix();
            allPassed = allPassed && fixResult;
            console.log('');
        }

        if (testType === 'all' || testType === 'error') {
            console.log('='.repeat(60));
            console.log('TESTE: Cen√°rio de Erro');
            console.log('='.repeat(60));
            const errorResult = await testErrorScenario();
            allPassed = allPassed && errorResult;
            console.log('');
        }

        if (testType === 'all' || testType === 'reconnection') {
            console.log('='.repeat(60));
            console.log('TESTE: Cen√°rio de Reconex√£o');
            console.log('='.repeat(60));
            const reconnectionResult = await testReconnectionScenario();
            allPassed = allPassed && reconnectionResult;
            console.log('');
        }

        console.log('='.repeat(60));
        console.log('RESULTADO FINAL');
        console.log('='.repeat(60));
        
        if (allPassed) {
            console.log('‚úÖ Todos os testes passaram!');
            console.log('üéâ A corre√ß√£o do pairing code est√° funcionando corretamente.');
        } else {
            console.log('‚ùå Alguns testes falharam.');
            console.log('üîß Verifique os logs acima para identificar os problemas.');
        }

        process.exit(allPassed ? 0 : 1);
    }

    runTests().catch(error => {
        console.error('‚ùå Erro fatal nos testes:', error);
        process.exit(1);
    });
}

module.exports = {
    testPairingCodeFix,
    testErrorScenario,
    testReconnectionScenario
}; 